How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    A capability of identifying a difference between the two versions allows
    finding the bug more quickly, as the search becomes limited to the parts
    of the content that was affected.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Easy recovery of stable versions gives more freedom in experimenting.
    Additionally doccumenting of reasons and changes enables analyse of
    different approaches.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros:
    		commits can be performed at points in time when some logicaly
    		seperable part of work is finished.

    		changes are summarised with a comment
    Cons:
    		commit can be forgotten

    		it is up to user to decide on what time interval, corresponding
    		scope of work remains unsecured. Thus the potential damage of
    		lost work is not linear. 

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because change of some functionality may require modification of multiple
    files, especially in programming.

How can you use the commands git log and git diff to view the history of files?

    Ckecking out files from different commits and figuring out what is the
    difference between those.

How might using version control make you more confident to make changes that
could break something?

    Knowing that some backup is always available

Now that you have your workspace set up, what do you want to try using Git for?

    Programming, personal projects
